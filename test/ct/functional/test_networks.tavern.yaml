# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the SLS networks API
# Author: Mitch Schooler
# Service: System Layout Service

# HMS test metrics test cases: 4
# 1. GET /networks API response code
# 2. GET /networks API response body
# 3. GET /networks/{network} API response code
# 4. GET /networks/{network} API response body
---
test_name: Verify the networks resource

stages:
  # 1. GET /networks API response code
  # 2. GET /networks API response body
  - name: Ensure that the SLS networks can be retrieved
    request:
      url: "{sls_base_url}/v1/networks"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            sequence:
              - type: map
                mapping:
                  Name:
                    type: str
                  FullName:
                    type: str
                  IPRanges:
                    type: seq
                    matching: all
                    sequence:
                      - type: str
                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                  Type:
                    type: str
                  LastUpdated:
                    type: int
                  LastUpdatedTime:
                    type: str
                    required: True
                    #pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|\
#[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True
                    mapping:
                      CIDR:
                        type: str
                        required: False
                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                      MTU:
                        type: int
                        required: False
                      MyASN:
                        type: int
                        required: False
                      PeerASN:
                        type: int
                        required: False
                      Subnets:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: map
                            allowempty: True
                            mapping:
                              CIDR:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                              DHCPEnd:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              DHCPStart:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              FullName:
                                type: str
                                required: False
                              Gateway:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              IPReservations:
                                type: seq
                                required: False
                                matching: all
                                sequence:
                                  - type: map
                                    mapping:
                                      Aliases:
                                        type: seq
                                        matching: all
                                        sequence:
                                          - type: str
                                      Comment:
                                        type: str
                                      IPAddress:
                                        type: str
                                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                                      Name:
                                        type: str
                              MetalLBPoolName:
                                type: str
                                required: False
                              Name:
                                type: str
                                required: False
                              ReservationEnd:
                                type: str
                                required: False
                              ReservationStart:
                                type: str
                                required: False
                              VlanID:
                                type: int
                                required: False
                      SystemDefaultRoute:
                        type: str
                        required: False
                      VlanRange:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: int
      save:
        json:
          network: "[0].Name"

  # 3. GET /networks/{network} API response code
  # 4. GET /networks/{network} API response body
  - name: Ensure that the SLS network data for a specific network can be retrieved
    request:
      url: "{sls_base_url}/v1/networks/{network}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Name:
                type: str
              FullName:
                type: str
              IPRanges:
                type: seq
                matching: all
                sequence:
                  - type: str
                    pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
              Type:
                type: str
              LastUpdated:
                type: int
              LastUpdatedTime:
                type: str
                required: True
                #pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|\
#[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
              ExtraProperties:
                type: map
                required: False
                allowempty: True
                mapping:
                  CIDR:
                    type: str
                    required: False
                    pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                  MTU:
                    type: int
                    required: False
                  MyASN:
                    type: int
                    required: False
                  PeerASN:
                    type: int
                    required: False
                  Subnets:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: map
                        allowempty: True
                        mapping:
                          CIDR:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                          DHCPEnd:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          DHCPStart:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          FullName:
                            type: str
                            required: False
                          Gateway:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          IPReservations:
                            type: seq
                            required: False
                            matching: all
                            sequence:
                              - type: map
                                mapping:
                                  Aliases:
                                    type: seq
                                    matching: all
                                    sequence:
                                      - type: str
                                  Comment:
                                    type: str
                                  IPAddress:
                                    type: str
                                    pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                                  Name:
                                    type: str
                          MetalLBPoolName:
                            type: str
                            required: False
                          Name:
                            type: str
                            required: False
                          ReservationEnd:
                            type: str
                            required: False
                          ReservationStart:
                            type: str
                            required: False
                          VlanID:
                            type: int
                            required: False
                  SystemDefaultRoute:
                    type: str
                    required: False
                  VlanRange:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: int
