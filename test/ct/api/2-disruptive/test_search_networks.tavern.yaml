# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the SLS networks API
# Author: Andrew Nieuwsma
# Service: System Layout Service


---
test_name: slsAPISearchNetworks
stages:

  - name: slsAPINetworksDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPINetworksPOSTEntry - create a new entry with good data
    request:
      url: "{sls_base_url}/v1/networks"
      method: POST
      verify: !bool "{verify}"
      json: {   "Name": "dummy","FullName":"dummynetwork","Type": "ethernet", "IPRanges":["127.0.0.1/8"]}
    response:
      status_code: 201


  - name: slsAPISearchNetworksNameFound - Search the networks for a specific name
    request:
      url: "{sls_base_url}/v1/search/networks?name=dummy"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Name:
                    type: str
                    pattern: "dummy"
                  FullName:
                    type: str
                  IPRanges:
                    type: seq
                    matching: all
                    sequence:
                      - type: str
                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                  Type:
                    type: str
                  LastUpdated:
                    type: int
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"


  - name: slsAPISearchNetworksFullNameFound - Search the networks for a specific fullname
    request:
      url: "{sls_base_url}/v1/search/networks?full_name=dummynetwork"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Name:
                    type: str
                  FullName:
                    type: str
                    pattern: "dummynetwork"
                  IPRanges:
                    type: seq
                    matching: all
                    sequence:
                      - type: str
                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                  Type:
                    type: str
                  LastUpdated:
                    type: int
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"

  - name: slsAPISearchNetworksCombineFound - Search the networks for several parameters
    request:
      url: "{sls_base_url}/v1/search/networks?name=dummy&full_name=dummynetwork&type=ethernet"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Name:
                    type: str
                    pattern: "dummy"
                  FullName:
                    type: str
                  IPRanges:
                    type: seq
                    matching: all
                    sequence:
                      - type: str
                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
                  Type:
                    type: str
                  LastUpdated:
                    type: int
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"


#  - name: slsAPISearchNetworksTypeFound - Search the networks for a specific Type
#    request:
#      url: "{sls_base_url}/v1/search/networks?type=ethernet"
#      method: GET
#      verify: !bool "{verify}"
#    response:
#      strict:
#       - json:off #its finding extra properties, which this is supposed to avoid, but alas its not working.
#      status_code: 200
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: seq
#            matching: any
#            required: True
#            sequence:
#              - type: map
#                mapping:
#                  Name:
#                    type: str
#                  FullName:
#                    type: str
#                  IPRanges:
#                    type: seq
#                    matching: all
#                    sequence:
#                      - type: str
#                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+"
#                  Type:
#                    type: str
#                    pattern: "ethernet"
#                  LastUpdated:
#                    type: int
#                  LastUpdatedTime:
#                    type: str
#                    required: True
#                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
#


#  - name: slsAPISearchNetworksIPFound - Search the networks for a specific IP
#    request:
#      url: "{sls_base_url}/v1/search/networks?ip_address=127.0.0.1%2F8"
#      method: GET
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: seq
#            matching: all
#            required: True
#            sequence:
#              - type: map
#                mapping:
#                  Name:
#                    type: str
#                  FullName:
#                    type: str
#                  IPRanges:
#                    type: seq
#                    matching: all
#                    sequence:
#                      - type: str
#                        pattern: "127.0.0.1/8"
#                  Type:
#                    type: str
#                  LastUpdated:
#                    type: int
#                  LastUpdatedTime:
#                    type: str
#                    required: True
#                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"


---
test_name: slsAPISearchNetworksNotFound

marks:
  - parametrize:
      key: param
      vals:
        - "name"
        - "full_name"

stages:

  - name: slsAPINetworksDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPINetworksPOSTEntry - create a new entry with good data
    request:
      url: "{sls_base_url}/v1/networks"
      method: POST
      verify: !bool "{verify}"
      json: {   "Name": "dummy","FullName":"dummynetwork","Type": "ethernet", "IPRanges":["127.0.0.1/8"]}
    response:
      status_code: 201


  - name: slsAPISearchNetworksNotFound - Search the networks for a unfound params
    request:
      url: "{sls_base_url}/v1/search/networks?{param}=DOESNOTEXIST"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                pattern: "about: blank"
              title:
                type: str
                required: True
                pattern: "Not Found"
              detail:
                type: str
                required: True
                pattern: "Network not found in DB"
              instance:
                type: str
                required: True
                pattern: "/v1/search/networks"
              status:
                type: int
                required: True

  - name: slsAPISearchNetworksNotFound - Search the networks for a unfound params
    request:
      url: "{sls_base_url}/v1/search/networks?type=invalid"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 500

  - name: slsAPISearchNetworksNotFound - Search the networks for an infiniband network
    request:
      url: "{sls_base_url}/v1/search/networks?type=infiniband"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404

  - name: slsAPISearchNetworksNotFound - Search the networks for an infiniband network
    request:
      url: "{sls_base_url}/v1/search/networks?ip_address=10.0.0.2&type=infiniband"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404