# MIT License
#
# (C) Copyright [2021-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the SLS hardware API
# Author: Andrew Nieuwsma
# Service: System Layout Service

---
test_name: slsAPIHardware

stages:
  - name: slsAPIHardwareGETall - Ensure that the SLS hardware can be retrieved
    request:
      url: "{sls_base_url}/v1/hardware"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            sequence:
              - type: map
                required: True
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "^[xsd].+"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xsd].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "^[xsd].+"
                  Type:
                    type: str
                    required: True
                    pattern: "^comptype_.+"
                  Class:
                    type: str
                    required: True
                    enum:
                      - "River"
                      - "Hill"
                      - "Mountain"
                  TypeString:
                    type: str
                    required: True
                    pattern: "^CDU$|^CDUMgmtSwitch$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^CabinetPDUPowerConnector$|^Chassis$|^ChassisBMC$|^ChassisBMCNic$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodeEnclosurePowerSupply$|^NodePowerConnector$|^Node$|^VirtualNode$|^Processor$|^StorageGroup$|^Drive$|^NodeNic$|^NodeHsnNic$|^Memory$|^NodeAccel$|^NodeAccelRiser$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTOR$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^RouterPowerConnector$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtHLSwitchEnclosure$|^MgmtHLSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True
                    mapping:
                      Aliases:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      Brand:
                        type: str
                        required: False
                      IP4addr:
                        type: str
                        required: False
                      Networks:
                        type: map
                        required: False
                        allowempty: True
                        mapping:
                          cn:
                            type: map
                            required: False
                            allowempty: True
                            mapping:
                              HMN:
                                type: map
                                required: False
                                mapping:
                                  CIDR:
                                    type: str
                                    required: True
                                  Gateway:
                                    type: str
                                    required: True
                                  VLan:
                                    type: int
                                    required: True
                      NID:
                        type: int
                        required: False
                      NodeNics:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                            pattern: "^[xs].+"
                      Password:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SNMPAuthPassword:
                        type: str
                        required: False
                      SNMPAuthProtocol:
                        type: str
                        required: False
                      SNMPPrivPassword:
                        type: str
                        required: False
                      SNMPPrivProtocol:
                        type: str
                        required: False
                      SNMPUsername:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      Username:
                        type: str
                        required: False
                      VendorName:
                        type: str
                        required: False
---
test_name: slsAPIHardwareXname



stages:

  - name: slsAPIHardwareDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/hardware/x9998c7s9b9001"
      method: DELETE
      verify: !bool "{verify}"
#  - name: slsAPIHardwareDELETEntry - Delete the entry if it exists
#    request:
#      url: "{sls_base_url}/v1/hardware/x9999c0s0b0"
#      method: DELETE
#      verify: !bool "{verify}"
#  - name: slsAPIHardwareDELETEntry - Delete the entry if it exists
#    request:
#      url: "{sls_base_url}/v1/hardware/x9999c1s0b0"
#      method: DELETE
#      verify: !bool "{verify}"

  - name: slsAPIHardwarePOSTEntry - create a new entry with good data (river)
    request:
      url: "{sls_base_url}/v1/hardware"
      method: POST
      verify: !bool "{verify}"
      json: {   "Xname": "x9998c7s9b9001","Class": "River"}
    response:
      status_code: 201

#  - name: slsAPIHardwarePOSTEntry - create a new entry with good data (mountain)
#    request:
#      url: "{sls_base_url}/v1/hardware"
#      method: POST
#      verify: !bool "{verify}"
#      json: {   "Xname": "x9999c0s0b0","Class": "mountain"}
#    response:
#      status_code: 201
#
#
#  - name: slsAPIHardwarePOSTEntry - create a new entry with good data (hill)
#    request:
#      url: "{sls_base_url}/v1/hardware"
#      method: POST
#      verify: !bool "{verify}"
#      json: {   "Xname": "x9999c1s0b0","Class": "hill"}
#    response:
#      status_code: 201


  - name: slsAPISearchHardwareFindEntry - Find hardware in SLS by parameters (xname)
    request:
      url: "{sls_base_url}/v1/search/hardware?xname=x9998c7s9b9001"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "x9998c7s9"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "x9998c7s9b9001"
                  Type:
                    type: str
                    required: True
                    pattern: "comptype_ncard"
                  Class:
                    type: str
                    required: True
                    pattern: "River"
                  TypeString:
                    type: str
                    required: True
                    pattern: "NodeBMC"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"

  - name: slsAPISearchHardwareFindEntry - Find hardware in SLS by parameters (xname + class)
    request:
      url: "{sls_base_url}/v1/search/hardware?xname=x9998c7s9b9001&class=River"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "x9998c7s9"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "x9998c7s9b9001"
                  Type:
                    type: str
                    required: True
                    pattern: "comptype_ncard"
                  Class:
                    type: str
                    required: True
                    pattern: "River"
                  TypeString:
                    type: str
                    required: True
                    pattern: "NodeBMC"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"

  - name: slsAPISearchHardwareFindEntry - Find hardware in SLS by parameters (Parent)
    request:
      url: "{sls_base_url}/v1/search/hardware?parent=x9998c7s9"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: any
            required: True
            sequence:
              - type: map
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "x9998c7s9"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "x9998c7s9b9001"
                  Type:
                    type: str
                    required: True
                    pattern: "comptype_ncard"
                  Class:
                    type: str
                    required: True
                    pattern: "River"
                  TypeString:
                    type: str
                    required: True
                    pattern: "NodeBMC"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"

  - name: slsAPISearchHardwareFindEntry - Find hardware in SLS by parameters (class)
    request:
      url: "{sls_base_url}/v1/search/hardware?class=River"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "^[xs].+"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "^[xs].+"
                  Type:
                    type: str
                    required: True
                    pattern: "^comptype_.+"
                  Class:
                    type: str
                    required: True
                    pattern: "River"
                  TypeString:
                    type: str
                    required: True
                    pattern: "^CDU$|^CDUMgmtSwitch$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^CabinetPDUPowerConnector$|^Chassis$|^ChassisBMC$|^ChassisBMCNic$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodeEnclosurePowerSupply$|^NodePowerConnector$|^Node$|^VirtualNode$|^Processor$|^StorageGroup$|^Drive$|^NodeNic$|^NodeHsnNic$|^Memory$|^NodeAccel$|^NodeAccelRiser$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTOR$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^RouterPowerConnector$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtHLSwitchEnclosure$|^MgmtHLSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True

  - name: slsAPISearchHardwareFindEntry - Find hardware in SLS by parameters (type)
    request:
      url: "{sls_base_url}/v1/search/hardware?type=comptype_ncard"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "^[xs].+"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "^[xs].+"
                  Type:
                    type: str
                    required: True
                    pattern: "comptype_ncard"
                  Class:
                    type: str
                    required: True
                    enum:
                      - "River"
                      - "Hill"
                      - "Mountain"
                  TypeString:
                    type: str
                    required: True
                    pattern: "^CDU$|^CDUMgmtSwitch$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^CabinetPDUPowerConnector$|^Chassis$|^ChassisBMC$|^ChassisBMCNic$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodeEnclosurePowerSupply$|^NodePowerConnector$|^Node$|^VirtualNode$|^Processor$|^StorageGroup$|^Drive$|^NodeNic$|^NodeHsnNic$|^Memory$|^NodeAccel$|^NodeAccelRiser$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTOR$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^RouterPowerConnector$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtHLSwitchEnclosure$|^MgmtHLSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True
