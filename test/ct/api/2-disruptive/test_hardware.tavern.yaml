# MIT License
#
# (C) Copyright [2021-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the SLS hardware API
# Author: Andrew Nieuwsma
# Service: System Layout Service

---
test_name: slsAPIHardware

stages:

  - name: slsAPIHardwareGETall - Ensure that the SLS hardware can be retrieved
    request:
      url: "{sls_base_url}/v1/hardware"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            sequence:
              - type: map
                required: True
                mapping:
                  Parent:
                    type: str
                    required: True
                    pattern: "^[xsd].+"
                  Children:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xsd].+"
                  Xname:
                    type: str
                    required: True
                    pattern: "^[xsd].+"
                  Type:
                    type: str
                    required: True
                    pattern: "^comptype_.+"
                  Class:
                    type: str
                    required: True
                    enum:
                      - "River"
                      - "Hill"
                      - "Mountain"
                  TypeString:
                    type: str
                    required: True
                    #TODO: MgmtHLSwitch not found in this pattern from SLS documentation
                    #pattern: "^CDU$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^Chassis$|^ChassisBMC$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodePowerConnector$|^Node$|^Processor$|^NodeNIC$|^NodeHsnNIC$|^Memory$|^NodeAccel$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                    pattern: "^CDU$|^CDUMgmtSwitch$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^Chassis$|^ChassisBMC$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodePowerConnector$|^Node$|^Processor$|^NodeNIC$|^NodeHsnNIC$|^Memory$|^NodeAccel$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtHLSwitch$|^MgmtSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                  LastUpdated:
                    type: int
                    required: True
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True
                    mapping:
                      Aliases:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      Brand:
                        type: str
                        required: False
                      IP4addr:
                        type: str
                        required: False
                      Networks:
                        type: map
                        required: False
                        allowempty: True
                        mapping:
                          cn:
                            type: map
                            required: False
                            allowempty: True
                            mapping:
                              HMN:
                                type: map
                                required: False
                                mapping:
                                  CIDR:
                                    type: str
                                    required: True
                                  Gateway:
                                    type: str
                                    required: True
                                  VLan:
                                    type: int
                                    required: True
                      NID:
                        type: int
                        required: False
                      NodeNics:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                            pattern: "^[xs].+"
                      Password:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SNMPAuthPassword:
                        type: str
                        required: False
                      SNMPAuthProtocol:
                        type: str
                        required: False
                      SNMPPrivPassword:
                        type: str
                        required: False
                      SNMPPrivProtocol:
                        type: str
                        required: False
                      SNMPUsername:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      Username:
                        type: str
                        required: False
                      VendorName:
                        type: str
                        required: False


---
test_name: slsAPIHardwareXname

stages:

  - name: slsAPIHardwareDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPIHardwareDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b8"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPIHardwarePOSTEntry - create a new entry with good data
    request:
      url: "{sls_base_url}/v1/hardware"
      method: POST
      verify: !bool "{verify}"
      json: {   "Xname": "x9999c7s9b9","Class": "Mountain"}
    response:
      status_code: 201

  - name: slsAPIHardwarePOSTEntryDuplicateFail - attempt to duplicate an entry
    request:
      url: "{sls_base_url}/v1/hardware"
      method: POST
      verify: !bool "{verify}"
      json: {   "Xname": "x9999c7s9b9","Class": "Mountain"}
    response:
      status_code: 409
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwarePOSTEntryBadData - attempt to create an entry with bad data
    request:
      url: "{sls_base_url}/v1/hardware"
      method: POST
      verify: !bool "{verify}"
      json: { "foo": "x9999c7s9b9","Class": "Mountain" }
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwarePUTexisting - update and existing entry
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: PUT
      verify: !bool "{verify}"
      json: { "Class": "River" }
    response:
      status_code: 200

  - name: slsAPIHardwarePUTNew - Create a new entry with put
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b8"
      method: PUT
      verify: !bool "{verify}"
      json: { "Class": "Mountain" }
    response:
      status_code: 201

  - name: slsAPIHardwarePUTNewBadData - Attempt to put a new entry with bad data
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b8"
      method: PUT
      verify: !bool "{verify}"
      json: { "foo": "x9999c7s9b9","bar": "Mountain" }
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwarePUTExistingBadData - Attempt to update an entry with bad keys
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: PUT
      verify: !bool "{verify}"
      json: { "foo": "x9999c7s9b9","bar": "Mountain" }
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwareGETEntry - Ensure that the SLS hardware for a specific xname can be retrieved
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Parent:
                type: str
                required: True
                pattern: "^[xs].+"
              Children:
                type: seq
                required: False
                matching: all
                sequence:
                  - type: str
                    pattern: "^[xs].+"
              Xname:
                type: str
                required: True
                pattern: "^[xs].+"
              Type:
                type: str
                required: True
                pattern: "^comptype_.+"
              Class:
                type: str
                required: True
                enum:
                  - "River"
                  - "Hill"
                  - "Mountain"
              TypeString:
                type: str
                required: True
                #TODO: MgmtHLSwitch not found in this pattern from SLS documentation
                #pattern: "^CDU$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^Chassis$|^ChassisBMC$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodePowerConnector$|^Node$|^Processor$|^NodeNIC$|^NodeHsnNIC$|^Memory$|^NodeAccel$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
                pattern: "^CDU$|^CDUMgmtSwitch$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^Chassis$|^ChassisBMC$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodePowerConnector$|^Node$|^Processor$|^NodeNIC$|^NodeHsnNIC$|^Memory$|^NodeAccel$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtHLSwitch$|^MgmtSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$"
              LastUpdated:
                type: int
                required: True
              LastUpdatedTime:
                type: str
                required: True
                pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
              ExtraProperties:
                type: map
                required: False
                allowempty: True
                mapping:
                  Aliases:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                  Brand:
                    type: str
                    required: False
                  IP4addr:
                    type: str
                    required: False
                  Networks:
                    type: map
                    required: False
                    allowempty: True
                    mapping:
                      cn:
                        type: map
                        required: False
                        allowempty: True
                        mapping:
                          HMN:
                            type: map
                            required: False
                            mapping:
                              CIDR:
                                type: str
                                required: True
                              Gateway:
                                type: str
                                required: True
                              VLan:
                                type: int
                                required: True
                  NID:
                    type: int
                    required: False
                  NodeNics:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: str
                        pattern: "^[xs].+"
                  Password:
                    type: str
                    required: False
                  Role:
                    type: str
                    required: False
                  SNMPAuthPassword:
                    type: str
                    required: False
                  SNMPAuthProtocol:
                    type: str
                    required: False
                  SNMPPrivPassword:
                    type: str
                    required: False
                  SNMPPrivProtocol:
                    type: str
                    required: False
                  SNMPUsername:
                    type: str
                    required: False
                  SubRole:
                    type: str
                    required: False
                  Username:
                    type: str
                    required: False
                  VendorName:
                    type: str
                    required: False

  - name: slsAPIHardwareGETEntryNotFound - Get an entry that does not exist
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b999"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwareDELETEntry - Delete a known good entry
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  - name: slsAPIHardwareDELETEntryAgainFail - Delete a previously deleted entry
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b9"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPIHardwareDELETNotFound - Delete an entry that does not exist
    request:
      url: "{sls_base_url}/v1/hardware/x9999c7s9b999"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              status:
                type: int
                required: True


