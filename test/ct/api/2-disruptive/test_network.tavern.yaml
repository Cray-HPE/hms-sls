# MIT License
#
# (C) Copyright [2022,2024] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the SLS networks API
# Author: Andrew Nieuwsma
# Service: System Layout Service

---
test_name: slsAPINetworks

stages:

  - name: Ensure that the SLS networks can be retrieved
    request:
      url: "{sls_base_url}/v1/networks"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            sequence:
              - type: map
                mapping:
                  Name:
                    type: str
                  FullName:
                    type: str
                  IPRanges:
                    type: seq
                    matching: all
                    sequence:
                      - type: str
                        pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
                  Type:
                    type: str
                  LastUpdated:
                    type: int
                  LastUpdatedTime:
                    type: str
                    required: True
                    pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
                  ExtraProperties:
                    type: map
                    required: False
                    allowempty: True
                    mapping:
                      CIDR:
                        type: str
                        required: False
                        pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
                      CIDR6:
                        type: str
                        required: False
                      MTU:
                        type: int
                        required: False
                      MyASN:
                        type: int
                        required: False
                      PeerASN:
                        type: int
                        required: False
                      Subnets:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: map
                            allowempty: True
                            mapping:
                              CIDR:
                                type: str
                                required: False
                                pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
                              CIDR6:
                                type: str
                                required: False
                              DHCPEnd:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              DHCPStart:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              FullName:
                                type: str
                                required: False
                              Gateway:
                                type: str
                                required: False
                                pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                              Gateway6:
                                type: str
                                required: False
                              IPReservations:
                                type: seq
                                required: False
                                matching: all
                                sequence:
                                  - type: map
                                    mapping:
                                      Aliases:
                                        type: seq
                                        matching: all
                                        sequence:
                                          - type: str
                                      Comment:
                                        type: str
                                      IPAddress:
                                        type: str
                                        pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                                      IPAddress6:
                                        type: str
                                        required: False
                                      Name:
                                        type: str
                              MetalLBPoolName:
                                type: str
                                required: False
                              Name:
                                type: str
                                required: False
                              ReservationEnd:
                                type: str
                                required: False
                              ReservationStart:
                                type: str
                                required: False
                              VlanID:
                                type: int
                                required: False
                      SystemDefaultRoute:
                        type: str
                        required: False
                      VlanRange:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: int
      save:
        json:
          network: "[0].Name"

---
test_name: slsAPINetworksEntry

stages:

  - name: slsAPINetworksDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPINetworksDELETEntry - Delete the entry if it exists
    request:
      url: "{sls_base_url}/v1/networks/dummy2"
      method: DELETE
      verify: !bool "{verify}"

  - name: slsAPINetworksPOSTEntry - create a new entry with good data
    request:
      url: "{sls_base_url}/v1/networks"
      method: POST
      verify: !bool "{verify}"
      json: {   "Name": "dummy","Type": "ethernet", "IPRanges":["127.0.0.1/8"]}
    response:
      status_code: 201

  - name: slsAPINetworksPOSTEntryDuplicateFail - attempt to duplicate an entry
    request:
      url: "{sls_base_url}/v1/networks"
      method: POST
      verify: !bool "{verify}"
      json: { "Name": "dummy","Type": "ethernet", "IPRanges":["127.0.0.1/8"]}
    response:
      status_code: 409
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksPOSTEntryBadData - attempt to create an entry with bad data
    request:
      url: "{sls_base_url}/v1/networks"
      method: POST
      verify: !bool "{verify}"
      json: { "foo": "dummy","Type": "ethernet", "IPRanges":["127.0.0.1/8"]}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksPUTexisting - update and existing entry
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: PUT
      verify: !bool "{verify}"
      json: { "Name": "dummy","Type": "OPA", "IPRanges":["127.0.0.1/8"] }
    response:
      status_code: 200

  - name: slsAPINetworksPUTNew - Create a new entry with put
    request:
      url: "{sls_base_url}/v1/networks/dummy2"
      method: PUT
      verify: !bool "{verify}"
      json: { "Name": "dummy","Type": "OPA", "IPRanges":["127.0.0.1/8"]  }
    response:
      status_code: 200

  - name: slsAPINetworksPUTNewBadData - Attempt to put a new entry with bad data
    request:
      url: "{sls_base_url}/v1/networks/dummy3"
      method: PUT
      verify: !bool "{verify}"
      json: { "foo": "x9999c7s9b9","bar": "Mountain" }
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksPUTExistingBadData - Attempt to update an entry with bad keys
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: PUT
      verify: !bool "{verify}"
      json: { "foo": "x9999c7s9b9","bar": "Mountain" }
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksGETEntry - Ensure that the SLS networks for a specific xname can be retrieved
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Name:
                type: str
              FullName:
                type: str
              IPRanges:
                type: seq
                matching: all
                sequence:
                  - type: str
                    pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
              Type:
                type: str
              LastUpdated:
                type: int
              LastUpdatedTime:
                type: str
                required: True
                pattern: "[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} \\+[0-9]{{4}}|[0-9]{{4}}-[0-9]{{2}}-[0-9]{{2}} [0-9]{{2}}:[0-9]{{2}}:[0-9]{{2}}.[0-9]+ \\+[0-9]{{4}} UTC"
              ExtraProperties:
                type: map
                required: False
                allowempty: True
                mapping:
                  CIDR:
                    type: str
                    required: False
                    pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
                  CIDR6:
                    type: str
                    required: False
                  MTU:
                    type: int
                    required: False
                  MyASN:
                    type: int
                    required: False
                  PeerASN:
                    type: int
                    required: False
                  Subnets:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: map
                        allowempty: True
                        mapping:
                          CIDR:
                            type: str
                            required: False
                            pattern: "([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9]+)|(([0-9a-fA-F]{{0,4}}[:])+([0-9a-fA-F]{{0,4}}|([0-9]+[.]){{3}}[0-9]+)/[0-9]+)"
                          CIDR6:
                            type: str
                            required: False
                          DHCPEnd:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          DHCPStart:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          FullName:
                            type: str
                            required: False
                          Gateway:
                            type: str
                            required: False
                            pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                          Gateway6:
                            type: str
                            required: False
                          IPReservations:
                            type: seq
                            required: False
                            matching: all
                            sequence:
                              - type: map
                                mapping:
                                  Aliases:
                                    type: seq
                                    matching: all
                                    sequence:
                                      - type: str
                                  Comment:
                                    type: str
                                  IPAddress:
                                    type: str
                                    pattern: "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
                                  IPAddress6:
                                    type: str
                                    required: False
                                  Name:
                                    type: str
                          MetalLBPoolName:
                            type: str
                            required: False
                          Name:
                            type: str
                            required: False
                          ReservationEnd:
                            type: str
                            required: False
                          ReservationStart:
                            type: str
                            required: False
                          VlanID:
                            type: int
                            required: False
                  SystemDefaultRoute:
                    type: str
                    required: False
                  VlanRange:
                    type: seq
                    required: False
                    matching: all
                    sequence:
                      - type: int

  - name: slsAPINetworksGETEntryNotFound - Get an entry that does not exist
    request:
      url: "{sls_base_url}/v1/networks/x9999c7s9b999"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksDELETEntry - Delete a known good entry
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  - name: slsAPINetworksDELETEntryAgainFail - Delete a previously deleted entry
    request:
      url: "{sls_base_url}/v1/networks/dummy"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True

  - name: slsAPINetworksDELETNotFound - Delete an entry that does not exist
    request:
      url: "{sls_base_url}/v1/networks/dummynofound"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: True
              instance:
                type: str
                required: True
              status:
                type: int
                required: True



